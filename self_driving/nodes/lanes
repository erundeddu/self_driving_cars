#!/usr/bin/env python

import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from std_msgs.msg import Int32MultiArray
from cv_bridge import CvBridge, CvBridgeError

def make_points(image, line):
    slope, intercept = line
    if abs(slope) > 0.2:
        y1 = int(image.shape[0])  # bottom of the image
        y2 = int(y1*3/5)         # slightly lower than the middle
        x1 = int((y1 - intercept)/slope)
        x2 = int((y2 - intercept)/slope)
    else:
        x1 = 0
        x2 = image.shape[1]
        y1 = int(x1*slope + intercept)
        y2 = int(x2*slope + intercept)
    return [[x1, y1, x2, y2]]

def average_slope_intercept(image, lines):
    candidate_stop_lines = []
    filtered_lines = []
    for line in lines:
        for x1, y1, x2, y2 in line:
            fit = np.polyfit((x1,x2), (y1,y2), 1)
            slope = fit[0]
            intercept = fit[1]
            if 0.7 < abs(slope):
                filtered_lines.append((slope, intercept))
            elif abs(slope) < 0.2:
                candidate_stop_lines.append((slope, intercept))
    avg_lines = []
    d_slope = 15*3.14159/180
    d_inter = 100
    d_x = 10
    for line in filtered_lines:
        did_append = False
        for sub_list in avg_lines:
            for compare_line in sub_list:
                y = int((image.shape[0])*3/5)         # slightly lower than the middle
                slope_cp = compare_line[0]
                intercept_cp = compare_line[1]
                slope_ln = line[0]
                intercept_ln = line[1]
                x_cp = int((y - intercept_cp)/slope_cp)
                x_ln = int((y - intercept_ln)/slope_ln)
                if abs(x_cp - x_ln) > d_x:
                    break
            else:
                sub_list.append(line)
                did_append = True
        if not did_append:
            avg_lines.append([line])
    
    avg_stop_lines = []
    d_y = 30
    for line in candidate_stop_lines:
        did_append = False
        for sub_list in avg_stop_lines:
            for compare_line in sub_list:
                x1 = 0         
                x2 = image.shape[1]
                slope_cp = compare_line[0]
                intercept_cp = compare_line[1]
                slope_ln = line[0]
                intercept_ln = line[1]
                y_cp_1 = int(intercept_cp + slope_cp*x1)
                y_cp_2 = int(intercept_cp + slope_cp*x2)
                y_ln_1 = int(intercept_ln + slope_cp*x1)
                y_ln_2 = int(intercept_ln + slope_cp*x2)
                if abs(y_cp_1 - y_ln_1) > d_y or abs(y_cp_2 - y_ln_2) > d_y:
                    break
            else:
                sub_list.append(line)
                did_append = True
        if not did_append:
            avg_stop_lines.append([line])

    avg_lines_out = []
    stop_lines_out = []
    for sub_list in avg_lines:
        fit_average = np.average(sub_list, axis=0)
        line = make_points(image, fit_average)
        avg_lines_out.append(line)
    for sub_list in avg_stop_lines:
        fit_average = np.average(sub_list, axis=0)
        line = make_points(image, fit_average)
        stop_lines_out.append(line)
    return avg_lines_out, stop_lines_out

    
    """left_fit    = []
    right_fit   = []
    if lines is None:
        return None
    for line in lines:
        for x1, y1, x2, y2 in line:
            fit = np.polyfit((x1,x2), (y1,y2), 1)
            slope = fit[0]
            intercept = fit[1]
            if slope < -0.5: # y is reversed in image
                left_fit.append((slope, intercept))
            elif slope > 0.5:
                right_fit.append((slope, intercept))
    # add more weight to longer lines
    averaged_lines = []
    if left_fit:
        left_fit_average  = np.average(left_fit, axis=0)
        left_line = make_points(image, left_fit_average)
        averaged_lines.append(left_line)
    if right_fit:
        right_fit_average = np.average(right_fit, axis=0)
        right_line = make_points(image, right_fit_average)
        averaged_lines.append(right_line)
    return averaged_lines"""

def canny(img):
    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    kernel = 5
    blur = cv2.GaussianBlur(img,(kernel, kernel),2)
    # cv2.imshow("gh",blur)
    # cv2.waitKey(0)
    canny = cv2.Canny(blur, 50, 150)
    return canny

def display_lines(img,lines,types):
    line_image = np.zeros_like(img)
    count = 0
    if lines is not None:
        for line in lines:
            for x1, y1, x2, y2 in line:
                if types[count] == 1:
                    cv2.line(line_image,(x1,y1),(x2,y2),(0,255,255),10)
                elif types[count] == 2:
                    cv2.line(line_image,(x1,y1),(x2,y2),(0,0,255),10)
                else:
                    cv2.line(line_image,(x1,y1),(x2,y2),(255,0,0),10)
            count += 1
    return line_image

def region_of_interest(canny):
    height = canny.shape[0]
    width = canny.shape[1]
    mask = np.zeros_like(canny)

    trapz = np.array([[
    (100, 109*height//160),
    (200, 11*height//20),
    (600, 11 * height//20),
    (700, 109*height//160),]], np.int32)

    trapz = np.array([[
    (0, 109*height//160),
    (0, 9*height//20),
    (800, 9* height//20),
    (800, 109*height//160),]], np.int32)

    cv2.fillPoly(mask, trapz, 255)
    masked_image = cv2.bitwise_and(canny, mask)
    return masked_image


class image_converter:

  def __init__(self):
    self.image_pub = rospy.Publisher("/my_lanes/image_raw",Image,queue_size=10)

    self.bridge = CvBridge()
    self.image_sub = rospy.Subscriber("/prius/front_camera/image_raw",Image,self.callback)
    self.lanes_pub = rospy.Publisher("/my_lanes/x_vals",Int32MultiArray,queue_size=10)

  def callback(self,data):
    try:
      cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
    except CvBridgeError as e:
      print(e)

    (rows,cols,channels) = cv_image.shape
    canny_image = canny(cv_image)
    cropped_canny = region_of_interest(canny_image)
    # cv2.imshow("result", cropped_canny)
    # cv2.waitKey(0)
    lines = cv2.HoughLinesP(cropped_canny, 2, np.pi/180, 100, np.array([]), minLineLength=40,maxLineGap=5)
    if lines is not None:
        averaged_lines, stops = average_slope_intercept(cv_image, lines)
        types = []
        for ln in averaged_lines:
            height = cv_image.shape[0]
            width = cv_image.shape[1]
            mask = np.zeros_like(cv_image)
            pts = ln[0]
            d_rect = 8
            trapz = np.array([[[
                (pts[0]-d_rect, pts[1]),
                (pts[2]-d_rect, pts[3]),
                (pts[2]+d_rect, pts[3]),
                (pts[0]+d_rect, pts[1]),]]], np.int32)
            cv2.fillPoly(mask, trapz, [255,255,255])
            masked_image = cv2.bitwise_and(cv_image, mask)
            hsv_frame = cv2.cvtColor(masked_image, cv2.COLOR_BGR2HSV)
            low_yellow = np.array([26, 150, 64])
            high_yellow = np.array([40, 255, 255])
            yellow_mask = cv2.inRange(hsv_frame, low_yellow, high_yellow)

            yellow = cv2.bitwise_and(cv_image, cv_image, mask=yellow_mask)
            num_yellow = np.sum(yellow_mask)
            min_yellow = 60000
            if num_yellow > min_yellow:
                types.append(1)
            else:
                types.append(0)
        ## attempt at stops

        for ln in stops:
            height = cv_image.shape[0]
            width = cv_image.shape[1]
            mask = np.zeros_like(cv_image)
            pts = ln[0]
            d_rect = 10
            trapz = np.array([[[
                (pts[0], max(pts[1]-d_rect,0)),
                (pts[2], max(pts[1]-d_rect,0)),
                (pts[2], min(pts[3]+d_rect,height)),
                (pts[0], min(pts[3]+d_rect,height)),]]], np.int32)
            cv2.fillPoly(mask, trapz, [255,255,255])
            masked_image = cv2.bitwise_and(cv_image, mask)
            hsv_frame = cv2.cvtColor(masked_image, cv2.COLOR_BGR2HSV)
            low_red_1 = np.array([170,100,60])
            high_red_1 = np.array([180,255,255])
            red_mask_1 = cv2.inRange(hsv_frame, low_red_1, high_red_1)
            low_red_2 = np.array([0,100,60])
            high_red_2 = np.array([10,255,255])
            red_mask_2 = cv2.inRange(hsv_frame, low_red_2, high_red_2)

            red_mask = red_mask_1 | red_mask_2

            red = cv2.bitwise_and(cv_image, cv_image, mask=red_mask)
            num_red = np.sum(red_mask)
            #print(num_red)
            min_red = 300000
            if num_red > min_red:
                types.append(2)
                averaged_lines.append(ln)
        ##

        line_image = display_lines(cv_image, averaged_lines, types)
        #line_image = display_lines(cv_image, lines)
        combo_image = cv2.addWeighted(cv_image, 0.8, line_image, 1, 1)

        lane_data = Int32MultiArray()
        lane_data_array = []
        for ii in range(len(types)):
            if types[ii] != 2:
                lane_data_array.append(averaged_lines[ii][0][2])
            else:
                lane_data_array.append(averaged_lines[ii][0][1])
            lane_data_array.append(types[ii])
        lane_data.data = lane_data_array
        self.lanes_pub.publish(lane_data)
    else:
        combo_image = cv_image
    try:
      self.image_pub.publish(self.bridge.cv2_to_imgmsg(combo_image, "bgr8"))  #bgr8
    except CvBridgeError as e:
      print(e)


if __name__=="__main__":

    rospy.init_node('lanes')
    ic = image_converter()
    rospy.spin()