#!/usr/bin/env python

"""
PARAMETERS:
    /key_sensitivity (double): sensitivity of throttle, braking and steering to key pressing

PUBLISHES:
    prius (prius_msgs/Control): throttle, braking, steering and gear to control Prius

SUBSCRIBES:

SERVICES:

"""

import rospy
from prius_msgs.msg import Control
import sys, select, termios, tty

def getKey(key_timeout):
    # function used to retrieve a key from the terminal
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], key_timeout)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key


if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)
    rospy.init_node('prius_teleop')
    pub = rospy.Publisher('prius', Control, queue_size=2)

    # initial settings 
    throttle = 0
    brake = 0
    steer = 0
    gear = 2

    # key sensitivity (lower value: takes longer to saturate throttle, brake, steer)
    key_sensitivity = rospy.get_param("/key_sensitivity", 0.1)

    # time period between key samples
    dt = 0.1

    msg = Control()

    print("w: throttle")
    print("s: brake")
    print("a: steer left")
    print("d: steer right")
    print("r: reverse gear")
    print("f: forward gear")
    print("n: neutral gear")
    print("q: QUIT NODE")

    try:
        while not rospy.is_shutdown():
            c = getKey(dt)  # collect current key being pressed
            if c == 'w':  # throttle
                throttle += key_sensitivity
                throttle = min(throttle, 1)
                brake = 0
            elif c == 's':  # brake
                brake += key_sensitivity
                brake = min(brake, 1)
                throttle = 0
            elif c == 'd':  # steer right
                steer -= key_sensitivity
                steer = max(steer, -1)
            elif c == 'a':  # steer left
                steer += key_sensitivity
                steer = min(steer, 1)
            elif c == 'r':  # reverse gear
                gear = 3
            elif c == "f":  # forward gear
                gear = 2
            elif c == 'q':  # quit program
                break
            elif c == 'n':  # neutral gear
                gear = 1
            else:  # no key pressed
                throttle = 0
                brake = 0
                if abs(steer) < key_sensitivity/10:
                    steer = 0
                elif steer > 0:  # gradual decay to forward direction
                    steer -= key_sensitivity
                elif steer < 0:
                    steer += key_sensitivity

            msg.throttle = throttle
            msg.brake = brake
            msg.steer = steer
            msg.shift_gears = gear
            pub.publish(msg)
    finally:
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
